// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// archive_metadata
Rcpp::List archive_metadata(const std::string& path);
RcppExport SEXP _casen_archive_metadata(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(archive_metadata(path));
    return rcpp_result_gen;
END_RCPP
}
// archive_filters
Rcpp::IntegerVector archive_filters();
RcppExport SEXP _casen_archive_filters() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(archive_filters());
    return rcpp_result_gen;
END_RCPP
}
// archive_formats
Rcpp::IntegerVector archive_formats();
RcppExport SEXP _casen_archive_formats() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(archive_formats());
    return rcpp_result_gen;
END_RCPP
}
// libarchive_version_
std::string libarchive_version_();
RcppExport SEXP _casen_libarchive_version_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libarchive_version_());
    return rcpp_result_gen;
END_RCPP
}
// archive_extract_
void archive_extract_(const std::string& archive_filename, Rcpp::CharacterVector filenames, size_t sz);
RcppExport SEXP _casen_archive_extract_(SEXP archive_filenameSEXP, SEXP filenamesSEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type archive_filename(archive_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< size_t >::type sz(szSEXP);
    archive_extract_(archive_filename, filenames, sz);
    return R_NilValue;
END_RCPP
}
// read_connection
SEXP read_connection(const std::string& archive_filename, const std::string& filename, const std::string& mode, Rcpp::NumericVector format, Rcpp::NumericVector filters, size_t sz);
RcppExport SEXP _casen_read_connection(SEXP archive_filenameSEXP, SEXP filenameSEXP, SEXP modeSEXP, SEXP formatSEXP, SEXP filtersSEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type archive_filename(archive_filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type filters(filtersSEXP);
    Rcpp::traits::input_parameter< size_t >::type sz(szSEXP);
    rcpp_result_gen = Rcpp::wrap(read_connection(archive_filename, filename, mode, format, filters, sz));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_casen_archive_metadata", (DL_FUNC) &_casen_archive_metadata, 1},
    {"_casen_archive_filters", (DL_FUNC) &_casen_archive_filters, 0},
    {"_casen_archive_formats", (DL_FUNC) &_casen_archive_formats, 0},
    {"_casen_libarchive_version_", (DL_FUNC) &_casen_libarchive_version_, 0},
    {"_casen_archive_extract_", (DL_FUNC) &_casen_archive_extract_, 3},
    {"_casen_read_connection", (DL_FUNC) &_casen_read_connection, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_casen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
